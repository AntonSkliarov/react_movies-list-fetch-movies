{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","Title","Plot","Poster","imdbID","className","src","alt","href","MoviesList","movies","map","movie","key","BASE_URL","getMovie","title","a","fetch","response","json","result","FindMovie","addMovie","useState","query","setQuery","movieForPreview","setMovieForPreview","movieAlreadyInList","setMovieAlreadyInList","searchError","setSearchError","movieSearch","requestedMovie","Response","htmlFor","type","id","placeholder","classNames","value","onChange","event","target","changeQuery","onClick","find","disabled","App","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b9328f8.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Plot = '',\n  Poster,\n  imdbID,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {Plot}\n        <br />\n        <a href={`https://www.imdb.com/title/${imdbID}/`}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbID} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = `http://www.omdbapi.com/?apikey=2488e367`;\n\nexport async function getMovie(title) {\n  const response = await fetch(`${BASE_URL}&t=[${title}]`);\n  const result = await response.json();\n\n  return result;\n}\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport function FindMovie({ addMovie, movies }) {\n  const [query, setQuery] = useState('');\n  const [movieForPreview, setMovieForPreview] = useState();\n  const [movieAlreadyInList, setMovieAlreadyInList] = useState(false);\n  const [searchError, setSearchError] = useState(false);\n\n  const checkMovieInList = () => {\n    if (movies.find(movie => movie.imdbID === movieForPreview.imdbID)) {\n      setMovieAlreadyInList(true);\n\n      return;\n    }\n\n    addMovie(movieForPreview);\n    setQuery('');\n  };\n\n  const changeQuery = (event) => {\n    setSearchError(false);\n    setMovieAlreadyInList(false);\n    setQuery(event.target.value);\n  };\n\n  const movieSearch = async() => {\n    const requestedMovie = await getMovie(query);\n\n    if (requestedMovie.Response === 'False') {\n      setSearchError(true);\n\n      return;\n    }\n\n    setSearchError(false);\n    setMovieForPreview(requestedMovie);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': searchError })}\n              value={query}\n              onChange={event => changeQuery(event)}\n            />\n          </div>\n          {searchError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={movieSearch}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={checkMovieInList}\n              disabled={!movieForPreview}\n            >\n              Add to the list\n            </button>\n            {movieAlreadyInList && (\n              <p className={classNames({ 'help is-danger': !searchError })}>\n                The movie already on the list\n              </p>\n            )}\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {movieForPreview && (\n          <MovieCard\n            Title={movieForPreview.Title}\n            Plot={movieForPreview.Plot}\n            Poster={movieForPreview.Poster}\n            imdbID={movieForPreview.imdbID}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      Title: PropTypes.string.isRequired,\n      Plot: PropTypes.string.isRequired,\n      Poster: PropTypes.string.isRequired,\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const addMovie = (movie) => {\n    setMovies(currentMovies => [...currentMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}