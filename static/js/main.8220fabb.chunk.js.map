{"version":3,"sources":["PropTypesShapes/MovieCardPropTypesShape.js","components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["PropTypes","shape","Title","string","isRequired","Plot","Poster","imdbID","MovieCard","movie","movieForList","title","description","imgUrl","imdbId","className","src","alt","href","MoviesList","movies","map","key","BASE_URL","getMovie","a","fetch","response","json","result","FindMovie","addMovie","useState","query","setQuery","movieForPreview","setMovieForPreview","movieAlreadyInList","setMovieAlreadyInList","searchError","setSearchError","movieSearch","event","preventDefault","requestedMovie","Response","htmlFor","type","id","placeholder","classNames","value","onChange","target","autoComplete","onClick","find","disabled","App","data","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8220fabb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const MovieCardPropTypesShape = PropTypes.shape({\n  Title: PropTypes.string.isRequired,\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n}).isRequired;\n","import React from 'react';\nimport './MovieCard.scss';\nimport { MovieCardPropTypesShape } from '../../PropTypesShapes';\n\nexport function MovieCard({ movie }) {\n  const movieForList = {\n    title: movie.Title,\n    description: movie.Plot,\n    imgUrl: movie.Poster,\n    imdbId: movie.imdbID,\n  };\n  const { title, description, imgUrl, imdbId } = movieForList;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {description}\n          <br />\n          <a href={`https://www.imdb.com/title/${imdbId}/`}>IMDB</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nMovieCard.propTypes = MovieCardPropTypesShape;\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbID} movie={movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = `https://www.omdbapi.com/?apikey=2488e367`;\n\nexport async function getMovie(title) {\n  const response = await fetch(`${BASE_URL}&t=[${title}]`);\n  const result = await response.json();\n\n  return result;\n}\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { MovieCardPropTypesShape } from '../../PropTypesShapes';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport function FindMovie({ addMovie, movies }) {\n  const [query, setQuery] = useState('');\n  const [movieForPreview, setMovieForPreview] = useState();\n  const [movieAlreadyInList, setMovieAlreadyInList] = useState(false);\n  const [searchError, setSearchError] = useState(false);\n\n  const checkMovieInList = () => {\n    const movieInListCheck = movies.find(movie => (\n      movie.imdbID === movieForPreview.imdbID));\n\n    if (movieInListCheck) {\n      setMovieAlreadyInList(true);\n\n      return;\n    }\n\n    addMovie(movieForPreview);\n    setQuery('');\n  };\n\n  const changeQuery = (event) => {\n    setSearchError(false);\n    setMovieAlreadyInList(false);\n    setQuery(event.target.value);\n    setMovieForPreview();\n  };\n\n  const movieSearch = async(event) => {\n    event.preventDefault();\n    const requestedMovie = await getMovie(query);\n\n    if (requestedMovie.Response === 'False') {\n      setSearchError(true);\n\n      return;\n    }\n\n    setSearchError(false);\n    setMovieForPreview(requestedMovie);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': searchError })}\n              value={query}\n              onChange={changeQuery}\n              autoComplete=\"off\"\n            />\n          </div>\n          {searchError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n              onClick={movieSearch}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={checkMovieInList}\n              disabled={!movieForPreview}\n            >\n              Add to the list\n            </button>\n            {movieAlreadyInList && (\n              <p className={classNames({ 'help is-danger': !searchError })}>\n                The movie already on the list\n              </p>\n            )}\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        {movieForPreview && (\n          <>\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard\n              movie={movieForPreview}\n            />\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    MovieCardPropTypesShape,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (movie) => {\n    setMovies(currentMovies => [...currentMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}